/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

/**
 *
 * @author Lap-064
 */
import DTOs.EmpledoCargadoDTO;
import DTOs.NuevoProductoVentaDTO;
import DTOs.ProductoCargadoDTO;
import Implementacion.RealizarVenta;
import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.DefaultListModel;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

public class RegistrarVenta extends javax.swing.JPanel {

    /**
     * Creates new form RealizarVenta
     */
    Aplicacion app;
    private List<ProductoCargadoDTO> listadoProductos;
    private RealizarVenta realizarVenta;

    public RegistrarVenta(Aplicacion app) {
        this.app = app;
        this.realizarVenta = new RealizarVenta();
        initComponents();
        valoresDefault();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCajero = new javax.swing.JLabel();
        tblProductosVenta = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        pnlTotal = new GUI.PanelRound();
        txtSubtotal = new javax.swing.JLabel();
        txtTotal = new javax.swing.JLabel();
        txtIva = new javax.swing.JLabel();
        btnFinalizarVenta = new GUI.PanelRound();
        jLabel4 = new javax.swing.JLabel();
        btnTarjeta = new GUI.PanelRound();
        jlabelTarjeta = new javax.swing.JLabel();
        btnEfectivo = new GUI.PanelRound();
        jLabelEfectivo = new javax.swing.JLabel();
        listaProductos = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        txtBusquedaNombre = new javax.swing.JLabel();
        txtBusquedaCodigo = new javax.swing.JLabel();
        inputNombre = new javax.swing.JTextField();
        inputCodigo = new javax.swing.JTextField();
        txtPanelVentaEnCaja = new javax.swing.JLabel();
        btnAtras = new javax.swing.JLabel();
        btnReiniciarVenta = new javax.swing.JLabel();
        btnAtajos = new GUI.PanelRound();
        jlabelAtajos = new javax.swing.JLabel();
        txtBusquedaNombre1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtCajero.setBackground(new java.awt.Color(0, 0, 0));
        txtCajero.setFont(new java.awt.Font("Product Sans Infanity", 0, 36)); // NOI18N
        txtCajero.setText("Cajero:");
        add(txtCajero, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 20, -1, -1));

        jTable1.setBackground(new java.awt.Color(217, 217, 217));
        jTable1.setFont(new java.awt.Font("Product Sans Infanity", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Descripci√≥n del articulo", "Cantidad", "Precio", "Importe"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(40);
        tblProductosVenta.setViewportView(jTable1);

        add(tblProductosVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 880, 370));

        pnlTotal.setBackground(new java.awt.Color(240, 244, 244));
        pnlTotal.setFont(new java.awt.Font("Product Sans Infanity", 0, 12)); // NOI18N
        pnlTotal.setRoundBottomLeft(30);
        pnlTotal.setRoundBottomRight(30);
        pnlTotal.setRoundTopLeft(30);
        pnlTotal.setRoundTopRight(30);
        pnlTotal.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtSubtotal.setBackground(new java.awt.Color(0, 0, 0));
        txtSubtotal.setFont(new java.awt.Font("Product Sans Infanity", 0, 30)); // NOI18N
        txtSubtotal.setText("Subtotal: $0.00");
        pnlTotal.add(txtSubtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 220, -1));

        txtTotal.setBackground(new java.awt.Color(0, 0, 0));
        txtTotal.setFont(new java.awt.Font("Product Sans Infanity", 0, 36)); // NOI18N
        txtTotal.setText("Total: $0.00");
        pnlTotal.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 220, -1));

        txtIva.setBackground(new java.awt.Color(0, 0, 0));
        txtIva.setFont(new java.awt.Font("Product Sans Infanity", 0, 30)); // NOI18N
        txtIva.setText("IVA(16%): $0.00");
        pnlTotal.add(txtIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 220, -1));

        add(pnlTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 220, 220, 220));

        btnFinalizarVenta.setBackground(new java.awt.Color(44, 44, 44));
        btnFinalizarVenta.setRoundBottomLeft(15);
        btnFinalizarVenta.setRoundBottomRight(15);
        btnFinalizarVenta.setRoundTopLeft(15);
        btnFinalizarVenta.setRoundTopRight(15);
        btnFinalizarVenta.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Product Sans Infanity", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Finalizar Venta");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFinalizarVenta.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 210, 70));

        add(btnFinalizarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 580, 290, 70));

        btnTarjeta.setBackground(new java.awt.Color(44, 44, 44));
        btnTarjeta.setRoundBottomLeft(15);
        btnTarjeta.setRoundBottomRight(15);
        btnTarjeta.setRoundTopLeft(15);
        btnTarjeta.setRoundTopRight(15);
        btnTarjeta.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jlabelTarjeta.setFont(new java.awt.Font("Product Sans Infanity", 0, 24)); // NOI18N
        jlabelTarjeta.setForeground(new java.awt.Color(255, 255, 255));
        jlabelTarjeta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlabelTarjeta.setText("Tarjeta");
        jlabelTarjeta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jlabelTarjeta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlabelTarjetaMouseClicked(evt);
            }
        });
        btnTarjeta.add(jlabelTarjeta, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 50));

        add(btnTarjeta, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 460, 220, 50));

        btnEfectivo.setBackground(new java.awt.Color(44, 44, 44));
        btnEfectivo.setRoundBottomLeft(15);
        btnEfectivo.setRoundBottomRight(15);
        btnEfectivo.setRoundTopLeft(15);
        btnEfectivo.setRoundTopRight(15);
        btnEfectivo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelEfectivo.setFont(new java.awt.Font("Product Sans Infanity", 0, 24)); // NOI18N
        jLabelEfectivo.setForeground(new java.awt.Color(255, 255, 255));
        jLabelEfectivo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelEfectivo.setText("Efectivo");
        jLabelEfectivo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelEfectivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelEfectivoMouseClicked(evt);
            }
        });
        btnEfectivo.add(jLabelEfectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 50));

        add(btnEfectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 520, 220, 50));

        jList1.setFont(new java.awt.Font("Product Sans Infanity", 0, 24)); // NOI18N
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList1KeyPressed(evt);
            }
        });
        listaProductos.setViewportView(jList1);

        add(listaProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 510, 760, 140));

        txtBusquedaNombre.setFont(new java.awt.Font("Product Sans Infanity", 0, 17)); // NOI18N
        txtBusquedaNombre.setText("Ctrl + A para consultar Atajos");
        add(txtBusquedaNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 120, 230, 30));

        txtBusquedaCodigo.setFont(new java.awt.Font("Product Sans Infanity", 0, 24)); // NOI18N
        txtBusquedaCodigo.setText("Busqueda Codigo:");
        add(txtBusquedaCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 460, 210, 30));

        inputNombre.setFont(new java.awt.Font("Product Sans Infanity", 0, 18)); // NOI18N
        inputNombre.setText("Nombre Producto");
        inputNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputNombreFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                inputNombreFocusLost(evt);
            }
        });
        inputNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputNombreKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputNombreKeyTyped(evt);
            }
        });
        add(inputNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 460, 160, 30));

        inputCodigo.setFont(new java.awt.Font("Product Sans Infanity", 0, 18)); // NOI18N
        inputCodigo.setText("Codigo");
        inputCodigo.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        inputCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputCodigoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                inputCodigoFocusLost(evt);
            }
        });
        inputCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputCodigoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputCodigoKeyTyped(evt);
            }
        });
        add(inputCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 460, 150, 30));

        txtPanelVentaEnCaja.setBackground(new java.awt.Color(0, 0, 0));
        txtPanelVentaEnCaja.setFont(new java.awt.Font("Product Sans Infanity", 0, 24)); // NOI18N
        txtPanelVentaEnCaja.setText("Panel de Venta en Caja");
        add(txtPanelVentaEnCaja, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, -1, -1));

        btnAtras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/atras (1).png"))); // NOI18N
        btnAtras.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAtras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAtrasMouseClicked(evt);
            }
        });
        add(btnAtras, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 50));

        btnReiniciarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/deshacer (1).png"))); // NOI18N
        btnReiniciarVenta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReiniciarVenta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnReiniciarVentaMouseClicked(evt);
            }
        });
        add(btnReiniciarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 70, -1, -1));

        btnAtajos.setBackground(new java.awt.Color(44, 44, 44));
        btnAtajos.setRoundBottomLeft(15);
        btnAtajos.setRoundBottomRight(15);
        btnAtajos.setRoundTopLeft(15);
        btnAtajos.setRoundTopRight(15);
        btnAtajos.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jlabelAtajos.setFont(new java.awt.Font("Product Sans Infanity", 0, 24)); // NOI18N
        jlabelAtajos.setForeground(new java.awt.Color(255, 255, 255));
        jlabelAtajos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlabelAtajos.setText("Consultar Atajos");
        jlabelAtajos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jlabelAtajos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlabelAtajosMouseClicked(evt);
            }
        });
        btnAtajos.add(jlabelAtajos, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 50));

        add(btnAtajos, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 150, 220, 50));

        txtBusquedaNombre1.setFont(new java.awt.Font("Product Sans Infanity", 0, 24)); // NOI18N
        txtBusquedaNombre1.setText("Busqueda Nombre:");
        add(txtBusquedaNombre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 460, 210, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void inputCodigoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputCodigoFocusGained
        if (inputCodigo.getText().equals("Codigo")) {
            inputCodigo.setText("");
        }
    }//GEN-LAST:event_inputCodigoFocusGained

    private void inputCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputCodigoFocusLost
        if (inputCodigo.getText().trim().isEmpty()) {
            inputCodigo.setText("Codigo");
        }
    }//GEN-LAST:event_inputCodigoFocusLost

    private void inputNombreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputNombreFocusGained
        if (inputNombre.getText().equals("Nombre Producto")) {
            inputNombre.setText("");
        }
    }//GEN-LAST:event_inputNombreFocusGained

    private void inputNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputNombreFocusLost
        if (inputNombre.getText().trim().isEmpty()) {
            inputNombre.setText("Nombre Producto");
        }
    }//GEN-LAST:event_inputNombreFocusLost

    private void btnAtrasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAtrasMouseClicked
        app.mostrarMenuOpciones();
    }//GEN-LAST:event_btnAtrasMouseClicked

    private void jlabelTarjetaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlabelTarjetaMouseClicked
        //app.mostrarFormularioTarjeta();
        app.mostrarFormularioTarjeta();
    }//GEN-LAST:event_jlabelTarjetaMouseClicked

    private void jLabelEfectivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelEfectivoMouseClicked
        app.mostrarFormularioEfectivo();
    }//GEN-LAST:event_jLabelEfectivoMouseClicked

    private void btnReiniciarVentaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReiniciarVentaMouseClicked
        int opcion = JOptionPane.showConfirmDialog(this, "¬øEst√°s seguro de que deseas reiniciar la venta?", "Confirmar Reinicio", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (opcion == JOptionPane.YES_OPTION) {
            reiniciarVenta();
        }
    }//GEN-LAST:event_btnReiniciarVentaMouseClicked

    private void inputCodigoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputCodigoKeyReleased
        String textoBusqueda = inputCodigo.getText().trim();
        buscarProducto(textoBusqueda);
    }//GEN-LAST:event_inputCodigoKeyReleased

    private void inputNombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputNombreKeyReleased
        String textoBusqueda = inputNombre.getText().trim();
        buscarProducto(textoBusqueda);
    }//GEN-LAST:event_inputNombreKeyReleased

    private void inputCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputCodigoKeyTyped
        char c = evt.getKeyChar();
        // Solo permite n√∫meros (0-9) y retroceso
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE) {
            evt.consume(); // Ignora la entrada si no es v√°lida
        }
    }//GEN-LAST:event_inputCodigoKeyTyped

    private void inputNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputNombreKeyTyped
        char c = evt.getKeyChar();
        // Permitir solo letras, espacios y retroceso
        if (!Character.isLetter(c) && c != ' ' && c != KeyEvent.VK_BACK_SPACE) {
            evt.consume(); // Ignorar entrada si no es v√°lida
        }
    }//GEN-LAST:event_inputNombreKeyTyped

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (evt.getClickCount() == 2) { // Doble clic
            agregarProductoVenta(); // Llama al m√©todo al doble clic
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jList1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) { // Si presiona Enter
            agregarProductoVenta(); // Llama al m√©todo
        }
    }//GEN-LAST:event_jList1KeyPressed

    private void jlabelAtajosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlabelAtajosMouseClicked
        abrirDialogoAtajos();
    }//GEN-LAST:event_jlabelAtajosMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private GUI.PanelRound btnAtajos;
    private javax.swing.JLabel btnAtras;
    private GUI.PanelRound btnEfectivo;
    private GUI.PanelRound btnFinalizarVenta;
    private javax.swing.JLabel btnReiniciarVenta;
    private GUI.PanelRound btnTarjeta;
    private javax.swing.JTextField inputCodigo;
    private javax.swing.JTextField inputNombre;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelEfectivo;
    private javax.swing.JList<String> jList1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jlabelAtajos;
    private javax.swing.JLabel jlabelTarjeta;
    private javax.swing.JScrollPane listaProductos;
    private GUI.PanelRound pnlTotal;
    private javax.swing.JScrollPane tblProductosVenta;
    private javax.swing.JLabel txtBusquedaCodigo;
    private javax.swing.JLabel txtBusquedaNombre;
    private javax.swing.JLabel txtBusquedaNombre1;
    private javax.swing.JLabel txtCajero;
    private javax.swing.JLabel txtIva;
    private javax.swing.JLabel txtPanelVentaEnCaja;
    private javax.swing.JLabel txtSubtotal;
    private javax.swing.JLabel txtTotal;
    // End of variables declaration//GEN-END:variables

    //Metodos Auxiliares para presentacion
    public void tama√±oColumnasPreferidos() {
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(80);  // C√≥digo
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(300); // Descripci√≥n del art√≠culo
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(60);  // Cantidad
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(80);  // Precio
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(80);  // Importe
    }

    public void cargarEmpleado() {
        EmpledoCargadoDTO empleadoCargado = realizarVenta.cargarEmpleado();
        txtCajero.setText("Cajero:  " + empleadoCargado.getNombre());
    }

    public void cargarProductos() {
        listadoProductos = realizarVenta.cargarProductos();
        // Crear el modelo para la lista
        DefaultListModel<String> modelo = new DefaultListModel<>();

        // Recorrer la lista y agregar los elementos al modelo
        for (ProductoCargadoDTO p : listadoProductos) {
            modelo.addElement(p.getCodigo() + " " + p.getNombre() + p.getDescripcion() + "  $" + p.getDecimal()); // Personaliza como quieras
        }
        // Asignar el modelo al jList1
        jList1.setModel(modelo);
    }

    public void reiniciarVenta() {
        // faltantes: 
        // eliminar productos venta de tabla
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setRowCount(0); // Elimina todas las filas
        //resetar el historial

        //resetear totales con la tabla vacia
        calcularTotales();

        inputCodigo.setText("");
        inputNombre.setText("");
    }

    public void valoresDefault() {
        cargarEmpleado();
        cargarProductos();
        tama√±oColumnasPreferidos();
        crearAtajos();
    }

    private void buscarProducto(String textoBusqueda) {
        DefaultListModel<String> modeloFiltrado = new DefaultListModel<>();

        if (textoBusqueda.trim().isEmpty()) {
            cargarProductos();
            return;
        }

        for (ProductoCargadoDTO p : listadoProductos) {
            String infoProducto = p.getCodigo() + " " + p.getNombre() + " " + p.getDescripcion() + " $" + p.getDecimal();

            // Convertir todo a min√∫sculas para b√∫squeda flexible
            String productoNormalizado = infoProducto.toLowerCase().replaceAll("\\s+", "");
            String textoNormalizado = textoBusqueda.toLowerCase().replaceAll("\\s+", "");

            if (productoNormalizado.contains(textoNormalizado)) {
                modeloFiltrado.addElement(infoProducto);
            }
        }

        if (modeloFiltrado.isEmpty()) {
            modeloFiltrado.addElement("No se encontraron coincidencias.");
        }

        jList1.setModel(modeloFiltrado);
    }

    public void agregarProductoVenta() {
        // Obtener el String seleccionado del JList
        String infoProducto = jList1.getSelectedValue();

        if (infoProducto != null && !infoProducto.isEmpty()) {
            // Convertir el String a ProductoCargadoDTO
            ProductoCargadoDTO productoCargado = convertirStringAProducto(infoProducto);

            if (productoCargado != null) {
                try {
                    // Obtener la cantidad del producto
                    double cantidad = Double.parseDouble((String) JOptionPane.showInputDialog(null, "Ingresa la cantidad del producto:", "Cantidad", JOptionPane.QUESTION_MESSAGE, null, null, "1.0"));

                    // Validar que la cantidad sea mayor que 0
                    if (cantidad <= 0) {
                        JOptionPane.showMessageDialog(null, "La cantidad debe ser mayor que 0.");
                        return;
                    }

                    // Agregar el producto convertido a la venta
                    NuevoProductoVentaDTO productoVenta = realizarVenta.agregarProducto(productoCargado, cantidad);
                    // Obtener el modelo de la tabla
                    DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();

                    // Crear un arreglo con los valores del producto para agregarlo a la tabla
                    Object[] fila = {
                        productoVenta.getProducto().getCodigo(),
                        productoVenta.getProducto().getNombre() + " " + productoVenta.getProducto().getDescripcion(),
                        productoVenta.getCantidad(),
                        productoVenta.getPrecioUnitario(),
                        productoVenta.getImporte()
                    };
                    modelo.addRow(fila);
                    // llamadaMetodo actualizarTotal
                    calcularTotales();
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Error: Ingresa un valor num√©rico v√°lido.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Error al convertir el producto.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecciona un producto v√°lido.");
        }
    }

    public ProductoCargadoDTO convertirStringAProducto(String infoProducto) {
        try {
            // Dividir el String por espacios para separar los datos
            String[] partes = infoProducto.split(" ");

            // Extraer el c√≥digo como int
            int codigo = Integer.parseInt(partes[0]);

            // Unir el nombre del producto (ej. "CocaCola 1.5lts Retornable")
            StringBuilder nombreBuilder = new StringBuilder();
            int i = 1;
            while (i < partes.length && !partes[i].startsWith("$")) {
                nombreBuilder.append(partes[i]).append(" ");
                i++;
            }

            String nombreCompleto = nombreBuilder.toString().trim();

            // Extraer precio (el √∫ltimo elemento, sin el signo $)
            String precioTexto = partes[partes.length - 1].replace("$", "");
            double precio = Double.parseDouble(precioTexto);

            // Crear el objeto ProductoCargadoDTO
            return new ProductoCargadoDTO(codigo, nombreCompleto, "Descripci√≥n", precio);

        } catch (Exception e) {
            e.printStackTrace();
            return null; // Si ocurre un error, devuelve null
        }
    }

    public void calcularTotales() {
        List<NuevoProductoVentaDTO> productosVenta = new ArrayList<>();

        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();

        // Recorrer todas las filas de la tabla
        for (int i = 0; i < modelo.getRowCount(); i++) {
            int codigo = (int) modelo.getValueAt(i, 0); // Columna 0 -> C√≥digo
            String nombreDescripcion = (String) modelo.getValueAt(i, 1); // Columna 1 -> Nombre + Descripci√≥n
            double cantidad = (double) modelo.getValueAt(i, 2); // Columna 2 -> Cantidad
            double precioUnitario = (double) modelo.getValueAt(i, 3); // Columna 3 -> Precio Unitario
            double importe = (double) modelo.getValueAt(i, 4); // Columna 4 -> Importe

            // Crear el objeto ProductoCargadoDTO si es necesario
            ProductoCargadoDTO producto = new ProductoCargadoDTO(codigo, nombreDescripcion, "", precioUnitario);

            // Crear el objeto NuevoProductoVentaDTO
            NuevoProductoVentaDTO productoVenta = new NuevoProductoVentaDTO(producto, cantidad, precioUnitario, importe);

            // Agregarlo a la lista
            productosVenta.add(productoVenta);
        }
        double subtotalCalculado = realizarVenta.calcularSubtotal(productosVenta);
        double iva = realizarVenta.calcularIva(subtotalCalculado);
        double total = realizarVenta.calcularTotal(subtotalCalculado, iva);

        String textoTotal = "Total: $" + String.format("%.2f", total);
        txtTotal.setText(textoTotal);
        ajustarTamanoTexto(txtTotal, textoTotal);

        String textoSubtotal = "Subtotal: $" + String.format("%.2f", subtotalCalculado);
        txtSubtotal.setText(textoSubtotal);
        ajustarTamanoTexto(txtSubtotal, textoSubtotal);

        String textoIva = "IVA(16%): $" + String.format("%.2f", iva);
        txtIva.setText(textoIva);
        ajustarTamanoTexto(txtIva, textoIva);
    }

    public void ajustarTamanoTexto(JLabel label, String texto) {
        Font fuenteOriginal = label.getFont();
        int anchoLabel = label.getWidth();

        int tamanoFuente = fuenteOriginal.getSize();
        FontMetrics fm = label.getFontMetrics(fuenteOriginal);

        while (fm.stringWidth(texto) > anchoLabel && tamanoFuente > 10) {
            tamanoFuente--;
            fuenteOriginal = fuenteOriginal.deriveFont((float) tamanoFuente);
            fm = label.getFontMetrics(fuenteOriginal);
        }
        label.setFont(fuenteOriginal);
        label.setText(texto);
    }

    public void crearAtajos() {
        // Crear un mapa para asociar teclas con m√©todos
        Map<KeyStroke, Runnable> acciones = Map.of(
                KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0), app::mostrarFormularioEfectivo,
                KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), app::mostrarFormularioTarjeta,
                KeyStroke.getKeyStroke(KeyEvent.VK_F8, 0), () -> inputCodigo.requestFocus(), // Asignar foco al inputCodigo
                KeyStroke.getKeyStroke(KeyEvent.VK_F9, 0), () -> inputNombre.requestFocus(), // Asignar foco al inputNombre
                // CONFIRMARVENTA -> Aqu√≠ agregas el m√©todo de finalizar venta cuando lo tengas --------------------------------------------------------                   
                KeyStroke.getKeyStroke(KeyEvent.VK_F12, 0), this::reiniciarVenta,
                KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.CTRL_DOWN_MASK), this::abrirDialogoAtajos
        );

        // Obtener InputMap y ActionMap del JPanel
        InputMap inputMap = this.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap actionMap = this.getActionMap();

        // Recorrer el mapa para asignar cada atajo
        for (Map.Entry<KeyStroke, Runnable> entrada : acciones.entrySet()) {
            String nombreAccion = "accion" + entrada.getKey(); // Nombre din√°mico para cada acci√≥n

            inputMap.put(entrada.getKey(), nombreAccion);
            actionMap.put(nombreAccion, new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    entrada.getValue().run(); // Ejecuta el m√©todo asociado
                }
            });
        }
    }

    public void abrirDialogoAtajos() {
        JDialog dialogo = new JDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Atajos del Sistema", true);
        dialogo.setSize(400, 350);
        dialogo.setLayout(new BorderLayout());
        dialogo.setLocationRelativeTo(this);

       JTextArea txtAtajos = new JTextArea(
        """
        F1   - Opci√≥n Pago Efectivo
        F2   - Opci√≥n Pago Tarjeta
        F8   - Buscar por C√≥digo
        F9   - Buscar por Nombre
        F10  - Finalizar Venta
        F12  - Reiniciar Venta
        
        Ctrl + A  Mostrar Atajos
        """
);
       txtAtajos.setFont(new Font("Monospaced", Font.PLAIN, 20));
        txtAtajos.setEditable(false);
        txtAtajos.setMargin(new Insets(10, 10, 10, 10)); // M√°rgenes
        dialogo.add(new JScrollPane(txtAtajos), BorderLayout.CENTER);

        JButton btnCerrar = new JButton("Cerrar");
        btnCerrar.addActionListener(e -> dialogo.dispose()); // Cerrar el di√°logo

        // Agregar el bot√≥n al di√°logo
        JPanel panelBoton = new JPanel();
        panelBoton.add(btnCerrar);
        dialogo.add(panelBoton, BorderLayout.SOUTH);

        dialogo.setVisible(true);
    }
}
